oop的延伸
面向切面编程
权限校验，性能监控，日志记录，事务控制

AOP采用横向抽取（动态代理）机制代替纵向继承
AOP的底层原理：（自动切换如下两个原理）
   1.jdk动态代理，需要实现接口
   2.cglib动态代理，不需要实现接口


AOP术语：（拦截=代理=增强）
    * Joinpoint：连接点，可拦截（被代理）的点
    * Pointcut：切入点，真正被拦截的点
    Advice：通知，增强，方法层面的增强
    Introduction：引介，类层面的增强
    Target：被增强的对象
    Weaving：织入
    Proxy；代理对象
    * Aspect：多个通知和多个切入点的组合称为切面

切入点表达式语法：
    基于execution的函数完成的
    [访问修饰符（缺省默认为public）] 方法返回值类型 com.xu.aop.aop.UserDao.save(..)

